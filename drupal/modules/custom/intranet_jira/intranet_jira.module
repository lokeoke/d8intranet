<?php
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\intranet_jira\IntranetJiraApiRest;
use Drupal\intranet_jira\IntranetJiraProjectTask;

/**
 * Add jira field to user entity
 *
 * @param $fields
 * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
 */
function intranet_jira_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  // Alter the field to use a custom class.
  if ($entity_type->id() == 'user') {
    $fields['field_jira_worklog'] = BaseFieldDefinition::create('list_string')
      ->setName('field_jira_worklog')
      ->setLabel(t('field_jira_worklog'))
      ->setDescription(t('field_jira_worklog.'))
      ->setTranslatable(FALSE)
      ->setQueryable(FALSE)
      ->setComputed(TRUE);

  }
}

/**
 * Add worklog time to entity
 *
 * @param array $entities
 * @param $entity_type_id
 */
function intranet_jira_entity_load(array $entities, $entity_type_id) {

  if ($entity_type_id == "user") {

    $storage = \Drupal::service("intranet_jira.storage");

    foreach ($entities as $entity) {
      $res = $storage->getLoggedTime($entity);

      $entity->field_jira_worklog = array($res);

    }
  }

}


/**
 * Implements hook_help().
 */
function intranet_jira_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the intranet_jira module.
    case 'help.page.intranet_jira':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Intranet Jira Integration') . '</p>';
      return $output;

    default:
  }
}
/**
 * Implements hook_cron().
 *
 */
function intranet_jira_cron() {

  $queue = \Drupal::queue('intranet_jira_aggregator');

  /**
   * @var IntranetJiraApiRest $jira
   */
  $jira = \Drupal::service("intranet_jira.api_rest");

  /**
   * @var IntranetJiraProjectTask $project_task
   */
  foreach ($jira->loadMultiple() as $project_task) {

    if (!$project_task->timeExists() || !$project_task->timeUpdated()) {
      /**
       * @see IntranetJiraAggregator::processItem($project_task)
       */
      $queue->createItem($project_task);
    }
  }

}