<?php
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\intranet_jira\IntranetJiraApiRest;
use Drupal\intranet_jira\IntranetJiraProjectTask;

/**
 * Add jira field to user entity
 *
 * @param $fields
 * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
 */
function intranet_jira_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  // Alter the field to use a custom class.
  if ($entity_type->id() == 'user') {
    $fields['field_jira_worklog'] = BaseFieldDefinition::create('list_string')
      ->setName('field_jira_worklog')
      ->setLabel(t('field_jira_worklog'))
      ->setDescription(t('field_jira_worklog.'))
      ->setTranslatable(FALSE)
      ->setQueryable(FALSE)
      ->setComputed(TRUE);

  }
}

/**
 * Add worklog time to entity
 *
 * @param array $entities
 * @param $entity_type_id
 */
function intranet_jira_entity_load(array $entities, $entity_type_id) {

  /**
   * This code was removed because this hook had been called so muth times
   * $entity->field_jira_worklog = array($res);
   */

}


/**
 * Implements hook_help().
 */
function intranet_jira_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the intranet_jira module.
    case 'help.page.intranet_jira':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Intranet Jira Integration') . '</p>';
      return $output;

    default:
  }
}
/**
 * Implements hook_cron().
 *
 */
function intranet_jira_cron() {

  /**
   * It is a frequency in days
   */
  $frequency_days = 1;

  /**
   * It is a frequency when worklogs should be deleted
   */
  $worklogs_clean_days = 4;

  /**
   * Just interval
   */
  $interval = 60 * 60 * 24;

  /**
   * We will store the last check value in store API
   */
  $last_check = \Drupal::state()->get('intranet_jira.last_check') ?: 0;

  /**
   * Just default logger
   */
  $logger = \Drupal::logger('cron');

  // Checking if cron should be started it will do it
  if ((REQUEST_TIME - $last_check) > ($interval * $frequency_days)) {
    /**
     * queue was removed, there was problems with performance
     */

    /**
     * @var IntranetJiraApiRest $jira
     */
    $jira = \Drupal::service("intranet_jira.api_rest");

    $logger->info("Jira get tasks");

    foreach ($jira->loadMultiple(-3) as $project_task) {

      if (!$project_task->timeExists() || !$project_task->timeUpdated()) {
        $logger->info("Jira %task in process", array("%task" => $project_task->getHumanName()));

        // it store a task
        $project_task->setTime();
        $project_task->refreshItems();
      }

    }
    $logger->info("Jira process was ended correctly");



    /**
     * Clean up old worklogs
     */
    $logger->info("Worklog cleaning up");
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'jira_worklog')
      ->condition('field_jira_started', date("Y-m-d", REQUEST_TIME - ($interval * $worklogs_clean_days)), '<');
    $nids = $query->execute();
    if (count($nids)) {
      $nodes = entity_load_multiple('node', $nids);
      foreach ($nodes as $node) {

        $logger->info("Worklog %title will be deleted", array('%title' => $node->title));
        $node->delete();
        $logger->info("Worklog was deleted");

      }
    }
    $logger->info("Clean up was done correctly");

    /**
     * I beliave the cron will finished correctly
     * and save last_check variable
     */
    \Drupal::state()->set('intranet_jira.last_check', REQUEST_TIME);
  }

}
